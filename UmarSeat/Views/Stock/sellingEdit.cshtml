@model UmarSeat.Models.StockTransfer

@{
    ViewBag.Title = "sellingEdit";
}
<style>
    select {
        border: 0px !important;
    }

    .select2-container {
        width: 100%;
    }

    .bootstrap-datetimepicker-widget, .datepicker {
        z-index: 9999 !important;
    }
</style>
<link media="screen" type="text/css" rel="stylesheet" href="~/Content/assets/plugins/bootstrap-datepicker/css/datepicker3.css">
<link href="~/Content/overlay-bootstrap.css" rel="stylesheet" />
<br />
<div class="panel panel-default">
    <div class="panel-heading">
        <div class="panel-title">
            <h3> Edit Stock Selling @Html.Raw(Model.pnrNumber) </h3>
        </div>
        <div class="pull-right">



        </div>
    </div>

    <div class="panel-body">

        <div id="dv1">
            <div id="aaa" class="panel-default-overlay-down">

                <div class="col-sm-12 text-center" style="height:100%">

                    <div class="progress-circle-indeterminate m-t-45">

                    </div>
                    <br>
                    <p class="small hint-text">Loading data</p>
                </div>
            </div>
        </div>

        @using (Html.BeginForm("sellingcreate", "stock", FormMethod.Post, htmlAttributes: new { id = "entry-form", style = "visibility:hidden" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                @Html.ValidationSummary(true)
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group  form-group-default form-group-default-select2 ">
                        @Html.LabelFor(model => model.country)
                        @{
            RouteValueDictionary RouteValues = new RouteValueDictionary();


            RouteValues["class"] = "full-width";
            RouteValues["data-init-plugin"] = "select2";
            RouteValues["id"] = "Country";

                        }

                        @Html.DropDownListFor(x => x.country, Model.ListCountry, "Choose Country", RouteValues)
                        @Html.ValidationMessageFor(model => model.country)

                    </div>

                </div>

            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group form-group-default">
                        @Html.LabelFor(model => model.pnrNumber)
                        @Html.TextBoxFor(model => model.pnrNumber, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.pnrNumber)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group  form-group-default form-group-default-select2 ">
                        @Html.LabelFor(model => model.airLine)
                        @Html.DropDownListFor(model => model.airLine, Model.ListAirline, new { @id = "airlineId", @class = "full-width" })
                        @Html.ValidationMessageFor(model => model.airLine)

                    </div>
                </div>

            </div>


            <div class="row">

                <div class="col-sm-12">
                    <div class="form-group  form-group-default form-group-default-select2" id="st" >
                        @Html.LabelFor(model => model.stockId)
                        <div id="stocks" class="form-group-default form-group-default-select2" style="padding:0px ; margin:0px">
                            @Html.DropDownListFor(x => x.stockId, new List<SelectListItem>(), "Choose Stock", new { @id = "stockId", @class = "full-width" })
                            @Html.ValidationMessageFor(model => model.stockId)
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">

                <div class="col-sm-6">
                    <div class="form-group  form-group-default form-group-default-select2 ">
                        @Html.LabelFor(model => model.idAgent)
                        @Html.DropDownListFor(model => model.idAgent, Model.ListAgents, "Select Agents", new { @id = "agentId", @class = "full-width" })
                        @Html.ValidationMessageFor(model => model.idAgent)

                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group  form-group-default form-group-default-select2 ">
                        @Html.LabelFor(model => model.sellingBranch)
                        @Html.DropDownListFor(model => model.sellingBranch, Model.ListBranches, "Select Selling Branch", new { @id = "sb", @class = "full-width" })
                        @Html.ValidationMessageFor(model => model.sellingBranch)

                    </div>
                </div>
            </div>




            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group  form-group-default ">
                        @Html.LabelFor(model => model.noOfSeats)
                        @Html.TextBoxFor(model => model.noOfSeats, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.noOfSeats)
                    </div>

                </div>
                <div class="col-sm-6">
                    <div class="form-group form-group-default">
                        @Html.LabelFor(model => model.cost)
                        @{
            RouteValues = new RouteValueDictionary();


            RouteValues["class"] = "form-control";

            RouteValues["id"] = "cost";
            RouteValues["value"] = "";
            RouteValues["data-inputmask"] = "'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true, 'digits': 0, 'digitsOptional': false, 'prefix': 'Rs ', 'placeholder': '0',  'clearMaskOnLostFocus': true";
            RouteValues["data-inputmask-repeat"] = "10";

                        }
                        @Html.TextBoxFor(model => model.cost, RouteValues)
                        @Html.ValidationMessageFor(model => model.cost)
                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group  form-group-default ">
                        @Html.LabelFor(model => model.margin)
                        @{
            RouteValues = new RouteValueDictionary();


            RouteValues["class"] = "form-control";

            RouteValues["id"] = "margin";
            RouteValues["value"] = "";
            RouteValues["data-inputmask"] = "'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true, 'digits': 0, 'digitsOptional': false, 'prefix': 'Rs ', 'placeholder': '0',  'clearMaskOnLostFocus': true";
            RouteValues["data-inputmask-repeat"] = "10";

                        }
                        @Html.TextBoxFor(model => model.margin, RouteValues)
                        @Html.ValidationMessageFor(model => model.margin)
                    </div>

                </div>
                <div class="col-sm-6">
                    <div class="form-group form-group-default">
                        @Html.LabelFor(model => model.sellingPrice)
                        @{
            RouteValues = new RouteValueDictionary();


            RouteValues["class"] = "form-control";

            RouteValues["id"] = "sellingPrice";
            RouteValues["value"] = "";
            RouteValues["data-inputmask"] = "'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true, 'digits': 0, 'digitsOptional': false, 'prefix': 'Rs ', 'placeholder': '0',  'clearMaskOnLostFocus': true";
            RouteValues["data-inputmask-repeat"] = "10";

                        }
                        @Html.TextBoxFor(model => model.sellingPrice, RouteValues)
                        @Html.ValidationMessageFor(model => model.sellingPrice)
                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group  form-group-default ">
                        @Html.LabelFor(model => model.advanceAmount)
                        @{
            RouteValues = new RouteValueDictionary();


            RouteValues["class"] = "form-control";

            RouteValues["id"] = "advanceAmount";
            RouteValues["value"] = "";
            RouteValues["data-inputmask"] = "'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true, 'digits': 0, 'digitsOptional': false, 'prefix': 'Rs ', 'placeholder': '0',  'clearMaskOnLostFocus': true";
            RouteValues["data-inputmask-repeat"] = "10";

                        }
                        @Html.TextBoxFor(model => model.advanceAmount, RouteValues)
                        @Html.ValidationMessageFor(model => model.advanceAmount)
                    </div>

                </div>
                <div class="col-sm-6">
                    @{
            Model.advanceDate = DateTime.Now;
                    }
                    <div class="form-group form-group-default date input-group">
                        @Html.LabelFor(model => model.advanceDate)
                        @Html.TextBoxFor(model => model.advanceDate, new { @id = "advancedate", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.advanceDate)
                        <span class="input-group-addon"> <i class="fa fa-calendar"></i></span>
                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group  form-group-default ">
                        @Html.LabelFor(model => model.gdsPnrNumber)
                        @Html.TextBoxFor(model => model.gdsPnrNumber, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.gdsPnrNumber)
                    </div>

                </div>
                <div class="col-sm-6">
                    <div class="form-group form-group-default">
                        @Html.LabelFor(model => model.catalystInvoiceNumber)
                        @Html.TextBoxFor(model => model.catalystInvoiceNumber, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.catalystInvoiceNumber)
                    </div>
                </div>
            </div>


            <div class="checkbox check-primary">
                @{
            if (Model.isPackage == true)
            {
                @Html.Raw(" <input type=\"checkbox\" name=\"isPackage\" checked=\"checked\" value=\"1\" id=\"checkbox1\">")
            }
            else
            {
                @Html.Raw(" <input type=\"checkbox\" name=\"isPackage\" value=\"1\" id=\"checkbox1\">")
            }
                }
               
                <label for="checkbox1">With Package</label>
            </div>



            <div class="row">
                <button type="button" class="btn btn-primary" onclick="updatedata()"> <i class="pg-plus"></i> Update Stock Selling</button>
                <button class="btn btn-default"><i class="pg-close"></i> Clear</button>
            </div>


        }
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://rawgit.com/RobinHerbots/jquery.inputmask/3.x/dist/jquery.inputmask.bundle.js"></script>
    <script src="~/Content/assets/plugins/jquery-autonumeric/autoNumeric.js" type="text/javascript"></script>
    <script src="http://ajax.aspnetcdn.com/ajax/jquery.validate/1.11.0/additional-methods.js"></script>

    <script src="~/Content/assets/plugins/bootstrap-select2/select2.min.js" type="text/javascript"></script>
    <script type="text/javascript" src="~/Content/assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.js"></script>
    <script src="~/app/sellingscript.js"></script>
    <script>

        $(document).ready(function () {
            $.ajax({
                type: "post",
                url: "/Branches/GetCities",
                data: { countryId: $('#Country').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    $("#s2id_Country").parent().removeClass('has-error');
                    var city = "<select id='stockId' name='stockId'>";

                    for (var i = 0; i < data.length; i++) {
                        data[i].Value = data[i].Value.replace(/\s/g, '');
                        if (data[i].Value == '@(Model.stockId)') {
                            city = city + '<option selected="selected" value=' + data[i].Value + '>' + data[i].Text + '</option>';
                        }
                        else {
                            city = city + '<option  value=' + data[i].Value + '>' + data[i].Text + '</option>';
                        }


                    }
                    city = city + '</select>';
                    $("#st").show();
                    $('#stocks').html(city);

                    $("#stockId").select2({
                        placeholder: "Select a City",
                        allowClear: true
                    });
                    $("#dv1").html('');
                    $("#entry-form").css('visibility', 'visible')
                }
            });
        });
    </script>
}
